import { expect } from 'chai';
import { describe, it, vi } from 'vitest';

import {
	getRawKey, makeKeyArray, getDecryptor, makeKey 
} from '$lib/bluetooth/gan/gan356i_v2';


describe('GAN v2 encryption/decryption', () => {
	const dummyV2 = {
		id: 'GANi3XXX'
	};
	it('can generate and import correct keys', async () => {
		const keys = await getRawKey(dummyV2);
		const rawKey = [0x01, 0x02, 0x42, 0x28, 0x31, 0x91, 0x16, 0x07, 0x20, 0x05, 0x18, 0x54, 0x42, 0x11, 0x12, 0x53];
		expect(keys.key.toString()).to.equal(rawKey.toString());
		const rawIV = [0x11, 0x03, 0x32, 0x28, 0x21, 0x01, 0x76, 0x27, 0x20, 0x95, 0x78, 0x14, 0x32, 0x12, 0x02, 0x43];
		expect(keys.iv.toString()).to.equal(rawIV.toString());
		// eslint-disable-next-line @typescript-eslint/no-var-requires
		vi.stubGlobal('crypto', require('node:crypto').webcrypto);
		const aesKey = await makeKeyArray(dummyV2, Uint8Array.from(keys.key));
		const v2Bytes = [0x9c, 0x73, 0x44, 0x5c, 0x43, 0x3d, 0x16, 0x07, 0x20, 0x05, 0x18, 0x54, 0x42, 0x11, 0x12, 0x53];
		expect(aesKey.toString()).to.equal(v2Bytes.toString());
		const aesIv = await makeKeyArray(dummyV2, Uint8Array.from(keys.iv));
		const v2iv = [0xac, 0x74, 0x34, 0x5c, 0x33, 0xac, 0x76, 0x27, 0x20, 0x95, 0x78, 0x14, 0x32, 0x12, 0x02, 0x43];
		expect(aesIv.toString()).to.equal(v2iv.toString());
	})

	it('can decrypt a message', async () => {
		const keys = await getRawKey(dummyV2);
		// eslint-disable-next-line @typescript-eslint/no-var-requires
		vi.stubGlobal('crypto', require('node:crypto').webcrypto);
		console.log(crypto.subtle)
		console.log(crypto.subtle.encrypt)
		//const m = [0x25, 0x01, 0xfa, 0xf0, 0xc9, 0x71, 0x3b, 0x62, 0x83, 0x3a, 0x15, 0x52, 0xca, 0x9a, 0xe3, 0xef, 0x16, 0x86, 0xe8, 0xaa];
		//const m = [0x7e, 0xc6, 0xdc, 0xd0, 0xa8, 0xec, 0x8d, 0x91, 0x7e, 0x2e, 0xeb, 0x75, 0xb1, 0x2e, 0x1b, 0xec, 0x76, 0x38, 0xc8, 0x12];
		//const m = [0x3e, 0x8f, 0xaa, 0x36, 0xeb, 0xf2, 0xf4, 0x4a, 0x18, 0xa3, 0xe9, 0xd6, 0x70, 0x9c, 0x38, 0x61, 0x3b, 0xa9, 0x81, 0x46];
		const m = [0x1f, 0x80, 0x62, 0xf3, 0x08, 0x1c, 0xa7, 0x15, 0x6a, 0x6f, 0xd5, 0x99, 0xb2, 0x58, 0xd2, 0xda, 0x25, 0x66, 0xf1, 0x06];

		const data = Uint8Array.from(m);
		const decrypt = await getDecryptor(dummyV2, keys);
		const message = await decrypt(data);
		const decryptedBlock = [0x1d, 0x23, 0x21, 0xd9, 0xfa, 0x23, 0xdd, 0x70, 0xb0, 0x00, 0xd2, 0x2e, 0x1d, 0xa1, 0xa2, 0x42, 0xd7, 0x0c, 0x00, 0x0a];

		expect(message.toString()).to.equal(decryptedBlock.toString());
	})
})
